using Lykke.AlgoStore.Algo;
using Lykke.AlgoStore.Algo.Indicators;

namespace Lykke.AlgoStore.CSharp.Algo.Implemention.ExecutableClass
{
    public sealed class MacdTrendAlgo : BaseAlgo
    {
        public double HoldingStep { get; set; }
        public double Tolerance { get; }

        private MACD _macd;

        public double Holdings { get; private set; }

        public override void OnStartUp()
        {
            _macd = MACD("MACD", fastEmaPeriod: 5, signalLinePeriod: 3);

            //Assign _holdings to the Volume you set for the Algo or get holdings from wallet
            //WalletBalance walletBalance;
            //Wallet.GetBalances().TryGetValue("BTC", out walletBalance);
            //_holdings = (double)walletBalance.Balance;
            
            Holdings = Volume;
            HoldingStep = Volume / 20;
        }

        public override void OnCandleReceived(ICandleContext context)
        {
            var histogram = _macd.Histogram;
            var fast = _macd.Fast.Value;

            if (histogram == null || fast == null)
                return;

            var signalDeltaPercent = histogram / fast;

            context.Actions.Log($"Function values are: Macd histogram: {histogram}, Macd fast EMA: {fast}");

            if (signalDeltaPercent > Tolerance)
            {
                //Buy 
                context.Orders.Market.Create(OrderAction.Buy, HoldingStep);
                Holdings += HoldingStep;

                context.Actions.Log($"{signalDeltaPercent} is above {Tolerance}, buying {HoldingStep} more of the asset. " +
                                    $"Current holdings: {Holdings}");
            }
            else if (Holdings > 0 && signalDeltaPercent < -Tolerance)
            {
                //Sell all holdings
                context.Orders.Market.Create(OrderAction.Sell, Holdings);
                Holdings = 0;

                context.Actions.Log($"{signalDeltaPercent} is below {-Tolerance}, selling all holdings.");
            }
        }
    }
}
