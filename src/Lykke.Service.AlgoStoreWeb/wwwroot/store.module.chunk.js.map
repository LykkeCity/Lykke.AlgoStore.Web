{"version":3,"sources":["D:/Projects/LykkeAlgoStore/AngularApplication/src/app/models/language.enum.ts","D:/Projects/LykkeAlgoStore/AngularApplication/src/app/store/store-routing.module.ts","D:/Projects/LykkeAlgoStore/AngularApplication/src/app/store/store.component.html","D:/Projects/LykkeAlgoStore/AngularApplication/src/app/store/store.component.scss","D:/Projects/LykkeAlgoStore/AngularApplication/src/app/store/store.component.ts","D:/Projects/LykkeAlgoStore/AngularApplication/src/app/store/store.module.ts"],"names":[],"mappings":"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","file":"store.module.chunk.js","sourcesContent":["export enum Language {\r\n    NET,\r\n    Java,\r\n    Python\r\n}\n\n\n// WEBPACK FOOTER //\n// D:/Projects/LykkeAlgoStore/AngularApplication/src/app/models/language.enum.ts","import { ModuleWithProviders } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { StoreComponent } from './store.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '',\r\n    component: StoreComponent\r\n  }\r\n];\r\n\r\n\r\nexport const StoreRouting: ModuleWithProviders = RouterModule.forChild(routes);\r\n\n\n\n// WEBPACK FOOTER //\n// D:/Projects/LykkeAlgoStore/AngularApplication/src/app/store/store-routing.module.ts","module.exports = \"<div class=\\\"container store-placeholder\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-xs-12\\\">\\n      <div class=\\\"stepper\\\">\\n        <mat-horizontal-stepper [linear]=\\\"true\\\" #stepper>\\n\\n          <mat-step>\\n            <div class=\\\"step-one-language\\\">\\n              <ng-template matStepLabel>language</ng-template>\\n\\n              <h1 class=\\\"heading-sm text-center mt-40 mb-60\\\">Choose Langage for the Algo:</h1>\\n              <div class=\\\"row\\\">\\n                <div class=\\\"col-md-4 text-center\\\">\\n                  <div class=\\\"language-button net disabled\\\" (click)=\\\"setLanguage(Language.NET)\\\">\\n                    <img src=\\\"assets/img/store/Microsoft.Net_logo.svg\\\" alt=\\\"\\\">\\n                    <p class=\\\"text-center\\\">.NET</p>\\n                  </div>\\n                </div>\\n                <div class=\\\"col-md-4 text-center\\\">\\n\\n                  <div class=\\\"language-button java active\\\" (click)=\\\"setLanguage(Language.Java)\\\">\\n                    <img src=\\\"assets/img/store/java_logo.svg\\\" alt=\\\"\\\">\\n                    <p class=\\\"text-center\\\">Java</p>\\n                  </div>\\n\\n                </div>\\n                <div class=\\\"col-md-4 text-center\\\">\\n                  <div class=\\\"language-button python disabled\\\" (click)=\\\"setLanguage(Language.Python)\\\">\\n                    <img src=\\\"assets/img/store/python_logo.svg\\\" alt=\\\"\\\">\\n                    <p class=\\\"text-center\\\">Python</p>\\n                  </div>\\n                </div>\\n              </div>\\n            </div>\\n          </mat-step>\\n\\n          <mat-step>\\n            <div class=\\\"step-two-setup\\\">\\n              <ng-template matStepLabel>setup</ng-template>\\n              <div class=\\\"row\\\">\\n                  <h1 class=\\\"heading-sm text-center mt-40 mb-60\\\">Set up your custom algorithm</h1>\\n              </div>\\n              <div class=\\\"row\\\">\\n                <div class=\\\"col-md-1\\\"></div>\\n                <div class=\\\"col-md-10\\\">\\n                  <p class=\\\"plain text-lgb text-left\\\">\\n                    Java maven Algo Archetype. In order to generate an algo you may use the Lykke Algo java archetype\\n                  </p>\\n                  \\n                    <pre class=\\\"code pt-25\\\">\\nmvn org.apache.maven.plugins:maven-archetype-plugin:2.4:generate \\\\\\n-DarchetypeGroupId=com.lykke.algos \\\\\\n-DarchetypeArtifactId=algos-archetype \\\\\\n-DarchetypeVersion=1.0-SNAPSHOT \\\\\\n-DgroupId=com.algo \\\\\\n-DartifactId=myalgo \\\\\\n-Dversion=1.0-SNAPSHOT \\\\\\n-DarchetypeCatalog=https://oss.sonatype.org/content/repositories/snapshots\\n                    </pre>\\n\\n                    <p class=\\\"plain text-lgb text-left\\\">\\n                        This will create a java maven project for you with groupId com.algo, artifact id myalgo in directory myalgo in your current folder. \\n                        Please go inside and review the contentns.\\n                    </p>\\n                    <pre class=\\\"code pt-20 pb-20\\\">cd myalgo</pre>\\n\\n                    <p class=\\\"plain text-lgb text-left\\\">\\n                        In order to make your algo to work please create a file called hft-client.properties with the following \\n                        content in myalgo/src/main/resources\\n                    </p>\\n                    <pre class=\\\"code pt-25\\\">\\nHFT_API_BASE_PATH=&lt;LYKKE HFT API trading endpoint, e.g https://hft-service-dev.lykkex.net&gt;\\nHFT_KEY=&lt;YOUR HFT API client key&gt;\\nWALLET_KEY=&lt;YOUR WALLET KEY&gt;\\nASSET_PAIR=&lt;THE ASSET PAIR YOU WANT TO TRADE, e.g BTCUSD&gt;\\nASSET=&lt;THE ASSET YOU WANT TO BUY AND SELL, e.g BTC&gt;\\nVOLUME=&lt;THE VOLUME YOU WANT TO BUY, e.g 0.001&gt;\\nMARGIN=&lt;THE MARGINE WITH WHICH YOU WANT TO SELL, e.g 1.1&gt;\\n                    </pre>\\n\\n                    <p class=\\\"plain text-lgb text-left\\\">\\n                        Once you are ready with that you may package your algo\\n                    </p>\\n                    <pre class=\\\"code pt-20 pb-20\\\">mvn clean package</pre>\\n\\n                    <p class=\\\"plain text-lgb text-left\\\">\\n                        This will generate an executable jar with dependencies file in your target folder.\\n                    </p>\\n                    <pre class=\\\"code pt-20 pb-20\\\">target/myalgo-1.0-SNAPSHOT-jar-with-dependencies.jar</pre>\\n\\n                    <p class=\\\"plain text-lgb text-left\\\">\\n                        In order to verify it you may execute:\\n                    </p>\\n                    <pre class=\\\"code pt-20 pb-20\\\">java -jar myalgo/target/myalgo-1.0-SNAPSHOT-jar-with-dependencies.jar</pre>\\n\\n                    <p class=\\\"plain text-lgb text-left\\\">\\n                        If you see an output like\\n                    </p>\\n                    <pre class=\\\"code pt-25\\\">\\n——————Check wallet!!!——————\\n——————Buy some coins on the market price!——————\\n——————Selling XXX coins with some profit on YYY price!!!——————                      \\n                    </pre>\\n                  \\n                    <p class=\\\"plain text-lgb text-left\\\">\\n                        Then your algo is working and you are ready to deploy it in AlgoStore. For the purpose upload your jar-with-dependencies.jar file there.\\n                    </p>\\n                </div>\\n                <div class=\\\"col-md-1\\\"></div>\\n              </div>\\n              <div class=\\\"text-center\\\">\\n                <button class=\\\"button button-blue\\\" mat-button matStepperNext>Next</button>\\n              </div>\\n            </div>\\n          </mat-step>\\n\\n          <mat-step [stepControl]=\\\"updateFormGroup\\\">\\n            <h1 class=\\\"heading-sm text-center mt-40 mb-60\\\">Upload Java file with your Algo</h1>\\n            <form [formGroup]=\\\"updateFormGroup\\\">\\n              <ng-template matStepLabel>upload</ng-template>\\n              <div class=\\\"col-md-3\\\"></div>\\n              <div class=\\\"col-md-6 text-center\\\">\\n\\n                <div class=\\\"mt-30 mb-90 step-two-setup-upload\\\" *ngIf=\\\"showUploadSection\\\">\\n\\n                  <img src=\\\"assets/img/store/upload_icon.svg\\\" alt=\\\"\\\" (click)=\\\"initiateUpload()\\\" width=\\\"64\\\" class=\\\"mb-60\\\">\\n                  <input type=\\\"file\\\" #fileInput placeholder=\\\"Upload file...\\\" accept=\\\".jar\\\" style=\\\"display: none;\\\" (change)=\\\"uploaded()\\\"\\n                  />\\n\\n                  <div>\\n                    <button class=\\\"button button-blue\\\" mat-button matStepperNext (click)=\\\"initiateUpload()\\\">Browse</button>\\n                  </div>\\n                </div>\\n\\n                <div class=\\\"step-two-setup-metadata\\\" *ngIf=\\\"!showUploadSection\\\">\\n                  <p class=\\\"file-uploaded\\\">\\n                    <img src=\\\"assets/img/store/file_icon.svg\\\" alt=\\\"\\\" width=\\\"17\\\" height=\\\"22\\\" class=\\\"pull-left mr-10\\\">\\n                    <span class=\\\"pull-left\\\">{{(file && file.name) ? file.name:'Upload jar file with Algo'}}</span>\\n                    <span class=\\\"pull-right\\\">100%</span>\\n                  </p>\\n                  <p class=\\\"error\\\"></p>\\n                  <h3 class=\\\"mt-60\\\">Add algo details:</h3>\\n                  <mat-form-field>\\n                    <input matInput placeholder=\\\"Algo name\\\" formControlName=\\\"name\\\" required>\\n                  </mat-form-field>\\n                  <br>\\n                  <mat-form-field>\\n                    <textarea matInput placeholder=\\\"Description\\\" matTextareaAutosize matAutosizeMinRows=\\\"2\\\" matAutosizeMaxRows=\\\"5\\\" formControlName=\\\"description\\\"></textarea>\\n                  </mat-form-field>\\n                  <div>\\n                    <button class=\\\"button button-blue\\\" mat-button matStepperNext (click)=\\\"update()\\\" [disabled]=\\\"isAlgoDetailsButtonDisabled()\\\">Next</button>\\n                  </div>\\n                </div>\\n\\n              </div>\\n              <div class=\\\"col-md-3\\\"></div>\\n            </form>\\n          </mat-step>\\n\\n          <mat-step>\\n            <ng-template matStepLabel>deploy</ng-template>\\n            <div class=\\\"step-four-deploy text-center mt-100\\\">\\n              \\n              <div *ngIf=\\\"showProgress\\\">\\n                <img src=\\\"assets/img/store/Rolling.svg\\\" alt=\\\"\\\">\\n              </div>\\n\\n              <div *ngIf=\\\"!showProgress && !hasDeploymentErrors\\\" class=\\\"mt-100\\\">\\n                <h3>Your Algo is being deployed</h3>\\n                <div class=\\\"mt-100\\\">\\n                  <button class=\\\"button button-blue\\\" mat-button matStepperPrevious (click)=\\\"showListOfAlgos()\\\">Finish</button>\\n                </div>\\n              </div>\\n\\n              <div *ngIf=\\\"hasDeploymentErrors\\\" class=\\\"mt-100\\\">\\n                <h3>There is a problem with your algo</h3>\\n                <div class=\\\"mt-100\\\">\\n                  <button class=\\\"button button-blue\\\" mat-button matStepperPrevious>Back</button>\\n                </div>\\n              </div>\\n\\n            </div>\\n          </mat-step>\\n\\n        </mat-horizontal-stepper>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// D:/Projects/LykkeAlgoStore/AngularApplication/src/app/store/store.component.html\n// module id = ../../../../../src/app/store/store.component.html\n// module chunks = store.module","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// D:/Projects/LykkeAlgoStore/AngularApplication/src/app/store/store.component.scss\n// module id = ../../../../../src/app/store/store.component.scss\n// module chunks = store.module","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { StoreService } from '../services/store.service';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatStepper } from '@angular/material';\nimport { Router } from '@angular/router';\nimport { Algo } from '../models/algo.interface';\nimport { Language } from '../models/language.enum';\nimport { EventService } from '../services/event.service';\n\n@Component({\n  selector: 'app-store',\n  templateUrl: './store.component.html',\n  styleUrls: ['./store.component.scss']\n})\nexport class StoreComponent implements OnInit {\n  hasDeploymentErrors: boolean;\n  file: FormData;\n  fileName: any;\n  showUploadSection: boolean;\n  algos: Array<Algo>;\n  isLinear = false;\n  secondFormGroup: FormGroup;\n  updateFormGroup: FormGroup;\n  hasFile: boolean;\n  showProgress: boolean = true;\n\n  Language: any = Language;\n\n  activeAlgo: Algo;\n\n  @ViewChild('fileInput') fileInput;\n  @ViewChild('stepper') stepper: MatStepper;\n\n  constructor(private storeService: StoreService,\n    private eventService: EventService,\n    private router: Router,\n    private formBuilder: FormBuilder) {\n     \n    }\n\n  ngOnInit() {\n   \n    this.secondFormGroup = this.formBuilder.group({\n      secondCtrl: ['', Validators.required]\n    });\n\n    this.updateFormGroup = this.formBuilder.group({\n      name: ['', Validators.required],\n      description: ['']\n    });\n\n    this.storeService.algoGetAll();\n\n    this.storeService.algos.subscribe(result => {\n      this.algos = result;\n\n      console.log('this.storeService.activeAlgo: '+ this.storeService.activeAlgo);\n      console.log(\"this.storeService.mode: \"+ this.storeService.mode);\n      console.log('this.algos.length: ' + this.algos.length);\n\n      if (this.storeService.mode != 'create' && this.algos.length > 0) {\n        this.router.navigate([\"store/algo-list\"]);\n      } else {\n        //this.storeService.mode = null;\n        this.showUploadSection = !this.hasFile;\n      }\n    });\n\n    this.eventService.subscribeToEvent('algo:deployment:done', this.onAlgoDeployed.bind(this));\n    this.eventService.subscribeToEvent('algo:deployment:error', this.onAlgoDeploymentError.bind(this));\n  }\n\n  onAlgoDeployed(){\n    this.showProgress = false;\n    this.stepper.next();\n  }\n\n  onAlgoDeploymentError(message){\n    this.showProgress = false;\n    this.hasDeploymentErrors = true;\n  }\n\n  setLanguage(language: Language) {\n    switch (language) {\n      case Language.NET:\n        console.log('NET');\n        break;\n      case Language.Python:\n        console.log('Python');\n        break;\n\n      default:\n        console.log('Java');\n        break;\n    }\n\n    this.stepper.next();\n  }\n\n  // Set state for 'Next' button on 'update' tab\n  isAlgoDetailsButtonDisabled() {\n     if (!this.hasFile && !this.updateFormGroup.valid) {\n       return true;\n     }\n  }\n\n  initiateUpload(e) {\n    let fileInput = document.querySelector('input[type=\"file\"]') as HTMLElement;\n    fileInput.click();\n  }\n\n  // fileUpload 'change' method\n  uploaded() {\n    this.hasFile = true;\n    this.file = this.fileInput.nativeElement.files[0];\n\n    this.showUploadSection = false;\n  }\n\n  // Button 'Next' on 'update' tab click method\n  update() {\n    this.showUploadSection = false;\n    this.stepper.selectedIndex = 2;\n\n    if (this.updateFormGroup.controls.name.value) {\n\n      let algo = {\n        Name: this.updateFormGroup.controls.name.value,\n        Description: this.updateFormGroup.controls.description.value\n      };\n\n      this.storeService.algoCreateDetails(algo, this.file);\n      this.stepper.next();\n    }\n\n    return false;\n  }\n\n  algoCreateDetails(algo: Algo) {\n    this.storeService.algoCreateDetails(algo);\n  }\n\n  showListOfAlgos() {\n    this.router.navigate([\"store/algo-list\"]);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// D:/Projects/LykkeAlgoStore/AngularApplication/src/app/store/store.component.ts","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n// ROUTING\r\nimport { StoreRouting } from './store-routing.module';\r\nimport { CdkStepperModule } from '@angular/cdk/stepper';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n// COMPONENTS\r\nimport { StoreComponent } from './store.component';\r\n\r\n// SERVICES\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    StoreRouting,\r\n    CdkStepperModule,\r\n    MatStepperModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    StoreComponent\r\n  ],\r\n  providers: []\r\n})\r\nexport class StoreModule { }\r\n\n\n\n// WEBPACK FOOTER //\n// D:/Projects/LykkeAlgoStore/AngularApplication/src/app/store/store.module.ts"],"sourceRoot":"webpack:///"}